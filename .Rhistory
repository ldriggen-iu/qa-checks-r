#' @param dateformat NEEDDOC
#' @export
getnadirvalue <- function(value,id,data=data,date=date,dateformat=dateformat){
## get appropriate variables from data frame if provided
if(!missing(data)){
ids <- get(deparse(substitute(id)),data)
values <- get(deparse(substitute(value)),data)
if(!missing(date)) dates <- get(deparse(substitute(date)),data)
}
if(!missing(dateformat) & !missing(date)){
dates <- as.Date(dates,dateformat)
}
keep1 <- unsplit(lapply(split(values, ids), FUN=function(x) min(x)), ids)
if(missing(date)){
nadirvalue <- unique(data.frame(ids,keep1,stringsAsFactors = FALSE))
names(nadirvalue) <- c(deparse(substitute(id)),deparse(substitute(value)))
}
if(!missing(date)){
nadirvalue <- data.frame(ids,keep1,dates,stringsAsFactors = FALSE)[keep1==values,]
nadirvalue <- nadirvalue[!duplicated(nadirvalue$ids),]
names(nadirvalue) <- c(deparse(substitute(id)),deparse(substitute(value)),deparse(substitute(date)))
}
return(nadirvalue)
}
## CHOOSE FIRST SELECTS THE TEXT STRING OCCURING BEFORE THE SPECIFIED SEPARATER
choosefirst <- function(var,sep=".") unlist(lapply(strsplit(var,sep,fixed=TRUE),function(x) x[1]))
#############################################################
#
# Program: tbl_checks.R
# Project: IeDEA
#
# Biostatistician/Programmer: Meridith Blevins, MS
# Purpose: Read in IeDEAS standard and write
# data queries
#
# INPUT: "tblXXX.csv", "tblXXX_checks.R"
# OUTPUT: "tbl_query_yyyymmdd.csv"
#
# Notes: As long as the working directory structure
# matches README.md, such that the data tables,
# R-code, and resources may be sourced,
# then this code should run smoothly, generating
# a listing of data queries in /output.
#
# Created: 9 November 2012
# Revisions: 24 February 2016 Larry Riggen added code for
#            tblDELIVERY_CHILD, ???? complete list when all new
#            tables are defined ????
#            added code to process North America (NA) region codes
#            as text instead of missing values.
#
#
#############################################################
rm(list=ls()) # clear namespace
## USER -- PLEASE REVISE or CHANGE THE APPROPRIATE WORKING DIRECTORY AND SET THE APPROPRIATE DATABASE CLOSE DATE
setwd("I:/Projects/IeDEA/Grants/Yiannoutsos/BD2K/IeDEA_DES/GitRepository")
## IN ORDER TO ASSESS DATES OCCURRING IN THE FUTURE, WE NEED A DATABASE CLOSE DATE (YYYY-MM-DD)
databaseclose <- "2013-12-01"
## READ QUERY_FUNCTIONS.R
source("code/query_functions.R")
## INDEX NUMBER FOR QUERY FILES
index <- 1
## EMPTY MATRIX FOR ALL QUERIES and ALL CHECKS
emptyquery <- data.frame(PID=character(),Table=character(),Variable=character(),Error=character(),Query=character(),Info=character())
allcheck <- NULL
## CONVERT DATABASE CLOSE TO DATE FORMAT, IF MISSING/INCORRECT, THEN USE SYSTEM DATE (TODAY)
databaseclose <- as.Date(databaseclose,"%Y-%m-%d")
databaseclose <- ifelse(is.na(databaseclose),Sys.Date(),databaseclose)
# ???? table tblCEP was dropped with the IeDEA_DES_Proposed_Additions_2016_Nov_14_V14.docx revision.
## IDENTIFY WHICH TABLES TO EXPECT FROM DES
expectedtables <- c("center","program","basic","ltfu","cd4","rna","bp","viro","res","reslvl2","reslvl3","art","med",
"dis","distb","visit","deliverychild","deliverymum","lab","canc","cep","newborn","newbornabnorm","pregout","preg","artmum")
expecteddestables <- c("tblCENTER","tblPROGRAM","tblBAS","tblLTFU","tblLAB_CD4","tblLAB_RNA","tblLAB_BP","tblLAB_VIRO","tblLAB_RES","tblLAB_RES_LVL_2","tblLAB_RES_LVL_3","tblART","tblMED","tblDIS","tblDIS_TB","tblVIS",
"tblDELIVERY_CHILD","tblDELIVERY_MUM","tblLAB","tblCANC","tblCEP","tblNEWBORN","tblNEWBORN_ABNORM","tblPREG_OUT","tblPREG","tblART_MUM")
## CHOOSE FIRST SELECTS THE TEXT STRING OCCURING BEFORE THE SPECIFIED SEPARATER
choosefirst <- function(var,sep=".") unlist(lapply(strsplit(var,sep,fixed=TRUE),function(x) x[1]))
## DETERMINE WHICH TABLES EXIST IN '/input'
existingtables <- choosefirst(list.files("input"))
readtables <- expectedtables[match(existingtables,expecteddestables)]
## READ IN ALL EXISTING TABLES
## ???? LDR original code
#for(i in 1:length(readtables)){
#  if(!is.na(readtables[i])){
#     readcsv <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
#     names(readcsv) <- tolower(names(readcsv))
#     assign(readtables[i],readcsv)
#   }
#}
## ???? LDR code to handle "NA" North America region code as text instead of missing values
for(i in 1:length(readtables)){
if(!is.na(readtables[i])){
if (readtables[i] == "center" || readtables[i]== "program")  {
# read the table in with na.strings=c("") to pick up the region as text
read1 <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(""))
names(read1) <- tolower(names(read1))
read2 <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
names(read2) <- tolower(names(read2))
center_region<-subset(read1,select=c("region"))
center_rest<-subset(read1,select= - region)
readcsv<-cbind(center_region,center_rest)
assign(readtables[i],readcsv)
}
else {
readcsv <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
names(readcsv) <- tolower(names(readcsv))
assign(readtables[i],readcsv)
}
}
}
################### QUERY CHECK PROGRAMS BEGIN HERE #################
if(exists("center")) source("code/tblCENTER_checks.R")
if(exists("program")) source("code/tblPROGRAM_checks.R")
if(exists("basic")) source("code/tblBAS_checks.R")
if(exists("ltfu")) source("code/tblLTFU_checks.R")
if(exists("cd4")) source("code/tblLAB_CD4_checks.R")
if(exists("rna")) source("code/tblLAB_RNA_checks.R")
if(exists("art")) source("code/tblART_checks.R")
if(exists("dis")) source("code/tblDIS_checks.R")
if(exists("visit")) source("code/tblVIS_checks.R")
if(exists("deliverychild")) source("code/tblDELIVERY_CHILD_checks.R")
if(exists("deliverymum")) source("code/tblDELIVERY_MUM_checks.R")
if(exists("lab")) source("code/tblLAB_checks.R")
# tblCANC.csv needs updated if(exists("canc")) source("code/tblCANC_checks.R")
if(exists("cep")) source("code/tblCEP_checks.R")
if(exists("distb")) source("code/tblDIS_TB_checks.R")
if(exists("bp")) source("code/tblLAB_BP_checks.R")
if(exists("viro")) source("code/tblLAB_VIRO_checks.R")
if(exists("res")) source("code/tblLAB_RES_checks.R")
if(exists("reslvl2")) source("code/tblLAB_RES_LVL_2_checks.R")
if(exists("reslvl3")) source("code/tblLAB_RES_LVL_3_checks.R")
if(exists("med")) source("code/tblMED_checks.R")
if(exists("newbornabnorm")) source("code/tblNEWBORN_ABNORM_checks.R")
if(exists("newborn")) source("code/tblNEWBORN_checks.R")
if(exists("pregout")) source("code/tblPREG_OUT_checks.R")
if(exists("preg")) source("code/tblPREG_checks.R")
if(exists("artmum")) source("code/tblART_MUM_checks.R")
################### QUERY CHECK PROGRAMS END HERE ###################
## COMBINE ALL QUERY FILES
allquery <- do.call(rbind,lapply(paste("query",1:(index-1),sep=""),get))
## WRITE QUERY FILES
## REORDER QUERY FILE ACCORDING TO SPECS
allquery <- allquery[,c(4:5,2:3,1,6)]
## WRITE QUERY FILES -- CREATE OUTPUT DIRECTORY (IF NEEDED)
wd <- getwd(); if(!file.exists("output")){dir.create(file.path(wd,"output"))}
write.csv(allquery,paste("output/tbl_query_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),row.names=FALSE)
#############################################################
#
#   Program: summarize_exceptions.R
#   Project: IeDEA
#
#   Biostatistician/Programmer: Meridith Blevins, MS
#   Purpose: Read in IeDEAS data exceptions and summarize
#
#   INPUT: "tbl_query_yyyymmdd.csv"
#   OUTPUT: "summaryX_yyyymmdd.csv"
#   PACKAGES: Brewer
#
#   Notes: As long as the working directory structure
#          matches README.md, such that the data tables,
#          R-code, and resources may be sourced,
#          then this code should run smoothly, generating
#          a listing of data queries in /output.
#
#   Created: 25 January 2013
#   Revisions: 20 February 2013
#
#############################################################
rm(list=ls()) # clear namespace
## USER -- PLEASE REVISE or CHANGE THE APPROPRIATE WORKING DIRECTORY
#setwd("/home/blevinml/Projects/IeDEAS/qa-checks-r")
## SUMMARIZE COUNT DATA
source("code/summarize_counts.R")
source("code/utility_functions.R")
## READ IN QUERY FILE -- CHOOSE MOST RECENT IF MULTIPLE
wd <- getwd()
if(!file.exists("output")) stop("ERROR: there is no output directory")
getexceptions <- list.files("output")
if(length(getexceptions)<1) stop("ERROR: there are no exception files in the output directory")
getexceptions <- getexceptions[grep("tbl_query_",getexceptions)]
useexceptions <- getexceptions[which.max(gsub(".csv","",gsub("tbl_query_","",getexceptions)))]
allquery <- read.csv(paste("output/",useexceptions,sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
## IDENTIFY PRIMARY TABLE QUERIED FOR MERGING WITH RECORDS COUNT DATA BELOW
allquery$tbl <- gsub(" ","",(sub(" &.*","",allquery$Table)))
## READ IN TABLE COUNTS (RECORDS AND PATIENTS)
recordcounts <- read.csv(paste("output/","counts_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
allquery <- merge(allquery,recordcounts)
## DETERMINE UNIQUE QUERY LISTINGS
allquery$err2tbl <- with(allquery, paste(Error,Query,Table,sep="---"))
allquery$err2var <- with(allquery, paste(Error,Query,Table,Variable,sep="---"))
allquery$err <- ifelse(allquery$Error=="Table Structure",paste(allquery$err2tbl,"---",sep=""),allquery$err2var)
## BUILD A FORMAT FOR PERCENTAGES
myper0 <- function(x){
y <- NULL
if(x <= 0.5 & x!=0){y <- "<1"}
else{y <- format(round(x),nsmall=0)}
return(y)
}
## FUNCTION TO COUNT THE NUMBER OF ERRORS, ALLOWS FOR ALLQUERY TO BE SUBSET
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
geterrcounts <- function(vartype,subset=TRUE){
data <- allquery[allquery$err %in% vartype & subset,]
x1 <- nrow(data)
if(x1==0){
x2 <- x3 <- x4 <- " "
}
else{
if(unique(data$Error)=="Table Structure"){
x2 <- x3 <- x4 <- " "
}
if(unique(data$Error)!="Table Structure"){
x2 <- myper0(100*x1/as.numeric(data$records[1]))
x3 <- length(unique(data$PID))
x4 <- myper0(100*x3/as.numeric(data$patients[1]))
}
}
line <- paste(vartype,x1,x2,x3,x4,sep="---")
return(line)
}
## CONVERT DATE VARIABLES AND PERFORM LOGIC CHECK AGAINST DATE OF BIRTH
convertdate <- function(date,table=parent.frame()){
if(exists(deparse(substitute(date)),table)){
var <- as.Date(get(deparse(substitute(date)),table),"%Y-%m-%d")
}
if(!exists(deparse(substitute(date)),table)){
var <- NULL
}
return(var)
}
## GET QUERY COUNTS FOR ALL ERROR TYPES, THEN COMBINE INTO A TABLE
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
geterrtable <- function(vartypes,subset=TRUE,total=FALSE){
summarytable <- data.frame(do.call("rbind",strsplit(sapply(vartypes,geterrcounts,subset=subset),"---")),stringsAsFactors=FALSE)
names(summarytable) <- c("Error","Query","Table","Variable","Record Count","Pct Total Records","Patient Count","Pct Total Patients")
row.names(summarytable) <- NULL
summarytable <- summarytable[order(summarytable$Error,summarytable$Query,summarytable$Table,summarytable$Variable),]
if(total){
qyct <- sum(allquery$err %in% vartypes & subset)
ptct <- length(unique(allquery$PID[allquery$err %in% vartypes & subset]))
summarytable[nrow(summarytable)+1,]<- c("Total","","","",qyct,"",ptct,"")
}
return(summarytable)
}
## GET SUMMARY OF ALL QUERIES
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
overalltable <- geterrtable(unique(allquery$err),total=TRUE)
## WRITE QUERY SUMMARY
write.csv(overalltable,paste("output/query_summary_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),row.names=FALSE)
############ EVERYTHING CODED ABOVE IS NOT DEPENDENT ON ANY R PACKAGE OR ORIGINAL DATASETS ############
## READ IN TABLE BASIC TO UTILIZE ENROLLMENT DATE FOR FIGURES
basic <- read.csv("input/tblBAS.csv",header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
names(basic) <- tolower(names(basic))
## READ IN TABLE VISIT TO UTILIZE CENTER FOR SUBSETTING
visit <- read.csv("input/tblVIS.csv",header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
names(visit) <- tolower(names(visit))
## CONVERT DATES USING EXPECTED FORMAT (will force NA if format is incorrect)
if(exists("enrol_d",basic)){basic$enrol_d <- convertdate(enrol_d,basic)}
if(exists("vis_d",visit)){visit$vis_d <- convertdate(vis_d,visit)}
## MERGE FOR ENROLLMENT DATE
visit <- merge(with(visit,data.frame(patient,center,vis_d,stringsAsFactors = FALSE)),with(basic,data.frame(patient,enrol_d,stringsAsFactors = FALSE)),by="patient",all.x=TRUE)
# in case there are duplicates by visit date
dups <- unsplit(lapply(split(visit$vis_d, visit$patient), FUN=anyDuplicated), visit$patient)
visit <- visit[dups == 0 & !is.na(visit$vis_d),]
## IDENTIFY CENTER of ENROLLMENT BY DATE OF VISIT CLOSEST TO DATE OF ENROLLMENT
enroll_center <- getbaseline(enrol_d,vis_d,patient,value=center,data=visit,returndate=FALSE,before=365*5,after=365*5) # default is closest date with window -30,30
allquery <- merge(merge(allquery,basic,by.x="PID",by.y="patient",all.x=TRUE),enroll_center,by.x="PID",by.y="id",all.x=TRUE)
## SUMMARIZE QUERIES IN HTML
library(brew)
brew(file='code/summarize.brew',output='output/summary_report.html')
brew(file='code/patient.brew',output='output/patient_report.html')
#############################################################
#
# Program: tbl_checks.R
# Project: IeDEA
#
# Biostatistician/Programmer: Meridith Blevins, MS
# Purpose: Read in IeDEAS standard and write
# data queries
#
# INPUT: "tblXXX.csv", "tblXXX_checks.R"
# OUTPUT: "tbl_query_yyyymmdd.csv"
#
# Notes: As long as the working directory structure
# matches README.md, such that the data tables,
# R-code, and resources may be sourced,
# then this code should run smoothly, generating
# a listing of data queries in /output.
#
# Created: 9 November 2012
# Revisions: 24 February 2016 Larry Riggen added code for
#            tblDELIVERY_CHILD, ???? complete list when all new
#            tables are defined ????
#            added code to process North America (NA) region codes
#            as text instead of missing values.
#
#
#############################################################
rm(list=ls()) # clear namespace
## USER -- PLEASE REVISE or CHANGE THE APPROPRIATE WORKING DIRECTORY AND SET THE APPROPRIATE DATABASE CLOSE DATE
setwd("I:/Projects/IeDEA/Grants/Yiannoutsos/BD2K/IeDEA_DES/GitRepository")
## IN ORDER TO ASSESS DATES OCCURRING IN THE FUTURE, WE NEED A DATABASE CLOSE DATE (YYYY-MM-DD)
databaseclose <- "2013-12-01"
## READ QUERY_FUNCTIONS.R
source("code/query_functions.R")
## INDEX NUMBER FOR QUERY FILES
index <- 1
## EMPTY MATRIX FOR ALL QUERIES and ALL CHECKS
emptyquery <- data.frame(PID=character(),Table=character(),Variable=character(),Error=character(),Query=character(),Info=character())
allcheck <- NULL
## CONVERT DATABASE CLOSE TO DATE FORMAT, IF MISSING/INCORRECT, THEN USE SYSTEM DATE (TODAY)
databaseclose <- as.Date(databaseclose,"%Y-%m-%d")
databaseclose <- ifelse(is.na(databaseclose),Sys.Date(),databaseclose)
# ???? table tblCEP was dropped with the IeDEA_DES_Proposed_Additions_2016_Nov_14_V14.docx revision.
## IDENTIFY WHICH TABLES TO EXPECT FROM DES
expectedtables <- c("center","program","basic","ltfu","cd4","rna","bp","viro","res","reslvl2","reslvl3","art","med",
"dis","distb","visit","deliverychild","deliverymum","lab","canc","cep","newborn","newbornabnorm","pregout","preg","artmum")
expecteddestables <- c("tblCENTER","tblPROGRAM","tblBAS","tblLTFU","tblLAB_CD4","tblLAB_RNA","tblLAB_BP","tblLAB_VIRO","tblLAB_RES","tblLAB_RES_LVL_2","tblLAB_RES_LVL_3","tblART","tblMED","tblDIS","tblDIS_TB","tblVIS",
"tblDELIVERY_CHILD","tblDELIVERY_MUM","tblLAB","tblCANC","tblCEP","tblNEWBORN","tblNEWBORN_ABNORM","tblPREG_OUT","tblPREG","tblART_MUM")
## CHOOSE FIRST SELECTS THE TEXT STRING OCCURING BEFORE THE SPECIFIED SEPARATER
choosefirst <- function(var,sep=".") unlist(lapply(strsplit(var,sep,fixed=TRUE),function(x) x[1]))
## DETERMINE WHICH TABLES EXIST IN '/input'
existingtables <- choosefirst(list.files("input"))
readtables <- expectedtables[match(existingtables,expecteddestables)]
## READ IN ALL EXISTING TABLES
## ???? LDR original code
#for(i in 1:length(readtables)){
#  if(!is.na(readtables[i])){
#     readcsv <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
#     names(readcsv) <- tolower(names(readcsv))
#     assign(readtables[i],readcsv)
#   }
#}
## ???? LDR code to handle "NA" North America region code as text instead of missing values
for(i in 1:length(readtables)){
if(!is.na(readtables[i])){
if (readtables[i] == "center" || readtables[i]== "program")  {
# read the table in with na.strings=c("") to pick up the region as text
read1 <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(""))
names(read1) <- tolower(names(read1))
read2 <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
names(read2) <- tolower(names(read2))
center_region<-subset(read1,select=c("region"))
center_rest<-subset(read1,select= - region)
readcsv<-cbind(center_region,center_rest)
assign(readtables[i],readcsv)
}
else {
readcsv <- read.csv(paste("input/",existingtables[i],".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c(NA,""))
names(readcsv) <- tolower(names(readcsv))
assign(readtables[i],readcsv)
}
}
}
################### QUERY CHECK PROGRAMS BEGIN HERE #################
if(exists("center")) source("code/tblCENTER_checks.R")
if(exists("program")) source("code/tblPROGRAM_checks.R")
if(exists("basic")) source("code/tblBAS_checks.R")
if(exists("ltfu")) source("code/tblLTFU_checks.R")
if(exists("cd4")) source("code/tblLAB_CD4_checks.R")
if(exists("rna")) source("code/tblLAB_RNA_checks.R")
if(exists("art")) source("code/tblART_checks.R")
if(exists("dis")) source("code/tblDIS_checks.R")
if(exists("visit")) source("code/tblVIS_checks.R")
if(exists("deliverychild")) source("code/tblDELIVERY_CHILD_checks.R")
if(exists("deliverymum")) source("code/tblDELIVERY_MUM_checks.R")
if(exists("lab")) source("code/tblLAB_checks.R")
# tblCANC.csv needs updated if(exists("canc")) source("code/tblCANC_checks.R")
if(exists("cep")) source("code/tblCEP_checks.R")
if(exists("distb")) source("code/tblDIS_TB_checks.R")
if(exists("bp")) source("code/tblLAB_BP_checks.R")
if(exists("viro")) source("code/tblLAB_VIRO_checks.R")
if(exists("res")) source("code/tblLAB_RES_checks.R")
if(exists("reslvl2")) source("code/tblLAB_RES_LVL_2_checks.R")
if(exists("reslvl3")) source("code/tblLAB_RES_LVL_3_checks.R")
if(exists("med")) source("code/tblMED_checks.R")
if(exists("newbornabnorm")) source("code/tblNEWBORN_ABNORM_checks.R")
if(exists("newborn")) source("code/tblNEWBORN_checks.R")
if(exists("pregout")) source("code/tblPREG_OUT_checks.R")
if(exists("preg")) source("code/tblPREG_checks.R")
if(exists("artmum")) source("code/tblART_MUM_checks.R")
################### QUERY CHECK PROGRAMS END HERE ###################
## COMBINE ALL QUERY FILES
allquery <- do.call(rbind,lapply(paste("query",1:(index-1),sep=""),get))
## WRITE QUERY FILES
## REORDER QUERY FILE ACCORDING TO SPECS
allquery <- allquery[,c(4:5,2:3,1,6)]
## WRITE QUERY FILES -- CREATE OUTPUT DIRECTORY (IF NEEDED)
wd <- getwd(); if(!file.exists("output")){dir.create(file.path(wd,"output"))}
write.csv(allquery,paste("output/tbl_query_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),row.names=FALSE)
#############################################################
#
#   Program: summarize_exceptions.R
#   Project: IeDEA
#
#   Biostatistician/Programmer: Meridith Blevins, MS
#   Purpose: Read in IeDEAS data exceptions and summarize
#
#   INPUT: "tbl_query_yyyymmdd.csv"
#   OUTPUT: "summaryX_yyyymmdd.csv"
#   PACKAGES: Brewer
#
#   Notes: As long as the working directory structure
#          matches README.md, such that the data tables,
#          R-code, and resources may be sourced,
#          then this code should run smoothly, generating
#          a listing of data queries in /output.
#
#   Created: 25 January 2013
#   Revisions: 20 February 2013
#
#############################################################
rm(list=ls()) # clear namespace
## USER -- PLEASE REVISE or CHANGE THE APPROPRIATE WORKING DIRECTORY
#setwd("/home/blevinml/Projects/IeDEAS/qa-checks-r")
## SUMMARIZE COUNT DATA
source("code/summarize_counts.R")
source("code/utility_functions.R")
## READ IN QUERY FILE -- CHOOSE MOST RECENT IF MULTIPLE
wd <- getwd()
if(!file.exists("output")) stop("ERROR: there is no output directory")
getexceptions <- list.files("output")
if(length(getexceptions)<1) stop("ERROR: there are no exception files in the output directory")
getexceptions <- getexceptions[grep("tbl_query_",getexceptions)]
useexceptions <- getexceptions[which.max(gsub(".csv","",gsub("tbl_query_","",getexceptions)))]
allquery <- read.csv(paste("output/",useexceptions,sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
## IDENTIFY PRIMARY TABLE QUERIED FOR MERGING WITH RECORDS COUNT DATA BELOW
allquery$tbl <- gsub(" ","",(sub(" &.*","",allquery$Table)))
## READ IN TABLE COUNTS (RECORDS AND PATIENTS)
recordcounts <- read.csv(paste("output/","counts_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
allquery <- merge(allquery,recordcounts)
## DETERMINE UNIQUE QUERY LISTINGS
allquery$err2tbl <- with(allquery, paste(Error,Query,Table,sep="---"))
allquery$err2var <- with(allquery, paste(Error,Query,Table,Variable,sep="---"))
allquery$err <- ifelse(allquery$Error=="Table Structure",paste(allquery$err2tbl,"---",sep=""),allquery$err2var)
## BUILD A FORMAT FOR PERCENTAGES
myper0 <- function(x){
y <- NULL
if(x <= 0.5 & x!=0){y <- "<1"}
else{y <- format(round(x),nsmall=0)}
return(y)
}
## FUNCTION TO COUNT THE NUMBER OF ERRORS, ALLOWS FOR ALLQUERY TO BE SUBSET
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
geterrcounts <- function(vartype,subset=TRUE){
data <- allquery[allquery$err %in% vartype & subset,]
x1 <- nrow(data)
if(x1==0){
x2 <- x3 <- x4 <- " "
}
else{
if(unique(data$Error)=="Table Structure"){
x2 <- x3 <- x4 <- " "
}
if(unique(data$Error)!="Table Structure"){
x2 <- myper0(100*x1/as.numeric(data$records[1]))
x3 <- length(unique(data$PID))
x4 <- myper0(100*x3/as.numeric(data$patients[1]))
}
}
line <- paste(vartype,x1,x2,x3,x4,sep="---")
return(line)
}
## CONVERT DATE VARIABLES AND PERFORM LOGIC CHECK AGAINST DATE OF BIRTH
convertdate <- function(date,table=parent.frame()){
if(exists(deparse(substitute(date)),table)){
var <- as.Date(get(deparse(substitute(date)),table),"%Y-%m-%d")
}
if(!exists(deparse(substitute(date)),table)){
var <- NULL
}
return(var)
}
## GET QUERY COUNTS FOR ALL ERROR TYPES, THEN COMBINE INTO A TABLE
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
geterrtable <- function(vartypes,subset=TRUE,total=FALSE){
summarytable <- data.frame(do.call("rbind",strsplit(sapply(vartypes,geterrcounts,subset=subset),"---")),stringsAsFactors=FALSE)
names(summarytable) <- c("Error","Query","Table","Variable","Record Count","Pct Total Records","Patient Count","Pct Total Patients")
row.names(summarytable) <- NULL
summarytable <- summarytable[order(summarytable$Error,summarytable$Query,summarytable$Table,summarytable$Variable),]
if(total){
qyct <- sum(allquery$err %in% vartypes & subset)
ptct <- length(unique(allquery$PID[allquery$err %in% vartypes & subset]))
summarytable[nrow(summarytable)+1,]<- c("Total","","","",qyct,"",ptct,"")
}
return(summarytable)
}
## GET SUMMARY OF ALL QUERIES
## WHEN SUBSET=TRUE, THIS SELECTS EVERYTHING (NO SUBSETTING)
overalltable <- geterrtable(unique(allquery$err),total=TRUE)
## WRITE QUERY SUMMARY
write.csv(overalltable,paste("output/query_summary_",format(Sys.Date(),"%Y%m%d"),".csv",sep=""),row.names=FALSE)
############ EVERYTHING CODED ABOVE IS NOT DEPENDENT ON ANY R PACKAGE OR ORIGINAL DATASETS ############
## READ IN TABLE BASIC TO UTILIZE ENROLLMENT DATE FOR FIGURES
basic <- read.csv("input/tblBAS.csv",header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
names(basic) <- tolower(names(basic))
## READ IN TABLE VISIT TO UTILIZE CENTER FOR SUBSETTING
visit <- read.csv("input/tblVIS.csv",header=TRUE,stringsAsFactors = FALSE,na.strings=c("NA",""))
names(visit) <- tolower(names(visit))
## CONVERT DATES USING EXPECTED FORMAT (will force NA if format is incorrect)
if(exists("enrol_d",basic)){basic$enrol_d <- convertdate(enrol_d,basic)}
if(exists("vis_d",visit)){visit$vis_d <- convertdate(vis_d,visit)}
## MERGE FOR ENROLLMENT DATE
visit <- merge(with(visit,data.frame(patient,center,vis_d,stringsAsFactors = FALSE)),with(basic,data.frame(patient,enrol_d,stringsAsFactors = FALSE)),by="patient",all.x=TRUE)
# in case there are duplicates by visit date
dups <- unsplit(lapply(split(visit$vis_d, visit$patient), FUN=anyDuplicated), visit$patient)
visit <- visit[dups == 0 & !is.na(visit$vis_d),]
## IDENTIFY CENTER of ENROLLMENT BY DATE OF VISIT CLOSEST TO DATE OF ENROLLMENT
enroll_center <- getbaseline(enrol_d,vis_d,patient,value=center,data=visit,returndate=FALSE,before=365*5,after=365*5) # default is closest date with window -30,30
allquery <- merge(merge(allquery,basic,by.x="PID",by.y="patient",all.x=TRUE),enroll_center,by.x="PID",by.y="id",all.x=TRUE)
## SUMMARIZE QUERIES IN HTML
library(brew)
brew(file='code/summarize.brew',output='output/summary_report.html')
brew(file='code/patient.brew',output='output/patient_report.html')
